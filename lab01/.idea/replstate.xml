<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1413823943685">{:repl-history {:ide [], :local [&quot;euclidian-distance [1 2] [3 4]&quot; &quot;(euclidian-distance [1 2] [3 4])&quot; &quot;(-main [])&quot; &quot;{:value 10}&quot; &quot;(def m {:value 10})&quot; &quot;:value m&quot; &quot;.value m&quot; &quot;(:value m)&quot; &quot;(def smth {:a 1 :b 12})&quot; &quot;(into [] smth)&quot; &quot;(into [] '(smth))&quot; &quot;(def elements ({:coordinates [0 3], :dist 1.3837464196457832} {:coordinates [8 1], :dist 1.3890101024446566} {:coordinates [1 0], :dist 1.5348847384348465} {:coordinates [7 6], :dist 1.5414514560632058} {:coordinates [1 5], :dist 1.5612968067933712} {:coordinates [7 3], :dist 1.9529485157938922} {:coordinates [5 5], :dist 2.0008870602345583} {:coordinates [6 1], :dist 2.0327378454660168} {:coordinates [2 4], :dist 2.1426201750673948} {:coordinates [5 3], :dist 2.167830104126702} {:coordinates [3 3], :dist 2.1969164082490997} {:coordinates [2 1], :dist 2.2125180572082748} {:coordinates [6 5], :dist 2.2919476229199907} {:coordinates [2 2], :dist 2.4632285559081097} {:coordinates [6 2], :dist 2.6155790517574866}))&quot; &quot;(def elements '({:coordinates [0 3], :dist 1.3837464196457832} {:coordinates [8 1], :dist 1.3890101024446566} {:coordinates [1 0], :dist 1.5348847384348465} {:coordinates [7 6], :dist 1.5414514560632058} {:coordinates [1 5], :dist 1.5612968067933712} {:coordinates [7 3], :dist 1.9529485157938922} {:coordinates [5 5], :dist 2.0008870602345583} {:coordinates [6 1], :dist 2.0327378454660168} {:coordinates [2 4], :dist 2.1426201750673948} {:coordinates [5 3], :dist 2.167830104126702} {:coordinates [3 3], :dist 2.1969164082490997} {:coordinates [2 1], :dist 2.2125180572082748} {:coordinates [6 5], :dist 2.2919476229199907} {:coordinates [2 2], :dist 2.4632285559081097} {:coordinates [6 2], :dist 2.6155790517574866}))&quot; &quot;(first elements)&quot; &quot;(map #(euclidian-distance (:dist (first elements)) (:dist %1)) elements)&quot; &quot;elements&quot; &quot;(calculate-min-distance (first elements) elements)&quot; &quot;(calculate-min-distance (first elements) (take (dec (count elements)) elements))&quot; &quot;(calculate-min-distance (first elements) (take-last (dec (count elements)) elements))&quot; &quot;(def initialPotentials \n  (let [points (read-coordinates \&quot;бабочка.txt\&quot;)]\n    (-&gt;&gt; (calculate-potentials points)\n         (sort-by #(:dist %1)))))&quot; &quot;(initialPotentials)&quot; &quot;(println initialPotentials)&quot; &quot;(def kernels (into [] '((last initialPotentials))))&quot; &quot;(def kernels (into [] '(last initialPotentials)))&quot; &quot;(def kernels (into [] '(firstKernel)))&quot; &quot;(def kernels (into [] '((firstKernel))))&quot; &quot;(hamming-distance [0 1 2 3] [1 1 3 4])&quot; &quot;(map vector [0 1 2 3] [1 1 3 4])&quot; &quot;(hamming-distance [1 1 3 3] [1 1 3 4])&quot; &quot;(hamming-distance [0 2 3 3] [1 1 3 4])&quot; &quot;(hamming-distance [0 2 3 3] [1 1 5 4])&quot; &quot;(def initialPotentials \n  (let [points (read-coordinates \&quot;ирисы.txt\&quot;)]\n    (-&gt;&gt; (calculate-potentials points)\n         (sort-by #(:dist %1)))))&quot; &quot;(def revisedPoints \n  (revise-point-potentials \n    (take (dec (count initialPotentials)) initialPotentials)\n    (last initialPotentials)))&quot; &quot;(ns lab01.core\n  (:gen-class))\n\n(defn -main\n  \&quot;I don't do a whole lot ... yet.\&quot;\n  [&amp; args]\n  (println \&quot;Hello, World!\&quot;)\n  (println (+ 3 4)))&quot; &quot;-main&quot; &quot;(-main 1 2 3)&quot; &quot;(+ 3 4)&quot; &quot;(-main 1)&quot; &quot;(defn average\n  [numbers]\n  (/ (apply + numbers) (count numbers)))&quot; &quot;(average 1 2 3)&quot; &quot;(average 1,2,3)&quot; &quot;(average [1 2 3])&quot; &quot;(average [1 2 4])&quot; &quot;(average [1 2 4.0])&quot; &quot;(average (1 2 4))&quot; &quot;(average '(1 2 4))&quot; &quot;(def revisedPoints\n  (revise-point-potentials\n    (take (dec (count initialPotentials)) initialPotentials)\n    (last initialPotentials)))&quot; &quot;(def firstKernel (last initialPotentials))&quot; &quot;firstKernel&quot; &quot;(def newKernel (last revisedPoints))&quot; &quot;(def kernels [firstKernel])&quot; &quot;kernels&quot; &quot;(count initialPotentials)&quot; &quot;(def initialPotentials\n  (let [points (read-coordinates \&quot;ирисы.txt\&quot;)]\n    (-&gt;&gt; (calculate-potentials points)\n         (sort-by #(:dist %1)))))&quot; &quot;(&lt; (:dist newKernel) (* EpsLow (:dist firstKernel)))&quot; &quot;initialPotentials&quot; &quot;(-main)&quot; &quot;(def initialPotentials\n  (let [points (read-coordinates \&quot;ирисы.txt\&quot;)]\n    (-&gt;&gt; (calculate-potentials points)\n         (sort-by #(:dist %1)))))\n\n(def revisedPoints\n  (revise-point-potentials\n    (take (dec (count initialPotentials)) initialPotentials)\n    (last initialPotentials)))\n\n(def firstKernel (last initialPotentials))\n(def newKernel (last revisedPoints))\n(def kernels [firstKernel])&quot; &quot;newKernel&quot; &quot;(&gt; (:dist newKernel) (* EpsHigh (:dist firstKernel)))&quot; &quot;(conj kernels newKernel)&quot; &quot;(take (dec (count revisedPoints)) revisedPoints)&quot; &quot;(def revisedPoints (revise-point-potentials (take (dec (count revisedPoints)) revisedPoints) newKernel))&quot; &quot;revisedPoints&quot;], :remote []}}</component>
</project>

